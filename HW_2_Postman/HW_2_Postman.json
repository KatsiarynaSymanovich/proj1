{
	"info": {
		"_postman_id": "d4997a5f-8064-4e90-a832-f5df15f8a737",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Katsiaryna",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test_1 - Status code 200",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test_2 - JSON structure",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"],",
							"    \"properties\": {",
							"        \"person\": {",
							"            \"type\": \"object\",",
							"            \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"],",
							"            \"properties\":{",
							"                \"u_age\": {\"type\": \"integer\"},",
							"                \"u_name\": {\"type\": \"array\"},",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"}",
							"            }        ",
							"        },    ",
							"        \"qa_salary_after_12_months\": {\"type\": \"integer\"},",
							"        \"qa_salary_after_6_months\": {\"type\": \"integer\"},",
							"        \"start_qa_salary\": {\"type\": \"integer\"}           ",
							"    }  ",
							"}",
							"",
							"pm.test('Schema is valid', function() {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"//Test_3 - Сhecking the multiplication of salary by the coefficient",
							"",
							"const jsonData = pm.response.json();",
							"let req = JSON.parse(request.data);",
							"let sal = req.salary;",
							"pm.test(\"The multiplication is right\", function () {",
							"  pm.expect(jsonData.qa_salary_after_6_months).to.eql(sal*2);",
							"  pm.expect(jsonData.qa_salary_after_12_months).to.eql(sal*2.9);",
							"  pm.expect(jsonData.person.u_salary_1_5_year).to.eql(sal*4); ",
							"});",
							"",
							"//Test_4 - set u_salary_1.5_year",
							"pm.test(\"You have set age\", function () {",
							"postman.setEnvironmentVariable(\"salary_1.5\", jsonData.person.u_salary_1_5_year);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": \"30\",\n    \"salary\": \"2000\",\n    \"name\": \"Katsiaryna\",\n    \"auth_token\": \"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test_1 - Status code 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test_2 - JSON structure",
							"let schema = {",
							"    \"type\": \"object\",",
							"    \"required\":[\"name\", \"age\", \"salary\"],",
							"    \"properties\":{",
							"      \"name\": {\"type\": \"string\"},",
							"      \"age\": {\"type\": \"integer\"},",
							"      \"salary\": {\"type\": \"array\"}",
							"    }",
							"}",
							"",
							"pm.test('Schema is valid', function() {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"//Test_3 -  Сhecking the multiplication of salary by the coefficient",
							"const jsonData = pm.response.json();",
							"let req = request.data;",
							"let sal = req.salary;",
							"pm.test(\"The multiplication is OK\", function () {",
							"  pm.expect(jsonData.salary[1]).to.eql(String (sal*2));",
							"  pm.expect(jsonData.salary[2]).to.eql(String(sal*3));",
							"});",
							"",
							"//Test_4 - salary[2] more than [1] and [0]",
							"",
							"pm.test(\"Compare salary[2]>salary[1]\", () => {",
							"    pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(parseInt(jsonData.salary[1]))",
							"});",
							"pm.test(\"Compare salary[2]>salary[0]\", () => {",
							"    pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(parseInt(jsonData.salary[0]))",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Katsiaryna",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"////Test_1 - Status code 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test_2 - JSON structure",
							"let schema = {",
							"    \"type\": \"object\",",
							"    \"required\":[\"name\", \"age\", \"daily_food\", \"daily_sleep\"],",
							"    \"properties\":{",
							"        \"name\": {\"type\": \"string\"},",
							"        \"age\": {\"type\": \"integer\"},",
							"        \"daily_food\": {\"type\": \"number\"},",
							"        \"daily_sleep\": {\"type\": \"number\"}",
							"    }",
							"}",
							"",
							"pm.test('Schema is valid', function() {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"//Test_3 -  Сhecking the multiplication of weight by the coefficient",
							"const jsonData = pm.response.json();",
							"let req = request.data;",
							"let weight = req.weight;",
							"pm.test(\"The multiplication of weight by the coefficient is right\", function () {",
							"  pm.expect(jsonData.daily_food).to.eql(weight*0.012);",
							"  pm.expect(jsonData.daily_sleep).to.eql(weight*2.5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "1",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "2",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Milka",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"////Test_1 - Status code 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test_2 - JSON structure",
							"let schema = {",
							"    \"type\": \"object\",",
							"    \"required\":[\"name\", \"age\", \"salary\", \"family\"],",
							"    \"properties\":{",
							"        \"name\": {\"type\": \"string\"},",
							"        \"age\":{\"type\": \"string\"},",
							"        \"salary\": {\"type\": \"integer\"},",
							"        \"family\":{",
							"            \"type\": \"object\",",
							"            \"required\":[\"children\", \"u_salary_1_5_year\"],",
							"            \"properties\":{",
							"                \"children\": {\"type\": \"array\"},",
							"                \"u_salary_1_5_year\":  {\"type\": \"integer\"}",
							"            }",
							"        }",
							"    }",
							"  }",
							"pm.test('Schema is valid', function() {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"//Test_3 - Checking \"name = name\"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Response property matches environment variable\", function () {",
							"  pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));",
							"});",
							"",
							"//Test_4 - Checking age",
							"let req = request.data;",
							"let age = req.age;",
							"pm.test(\"Age from response is the same as age from request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.age).to.eql(age);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_1.5}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Katsiaryna",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Take any object from the sent list, use js random.",
							"//In the object, take Cur_ID and pass it through the environment to the next request.",
							"let jsonData = pm.response.json();",
							"let random = jsonData[Math.floor(Math.random()*jsonData.length)];",
							"pm.test(\"Set Cur_ID in the environment\", function () {",
							"    postman.setEnvironmentVariable(\"Cur_ID\", random.Cur_ID);",
							"});",
							"",
							"let curr_ID;",
							"let auth_t = pm.environment.get(\"token\");",
							"",
							"//**** Iterate the list of currencies",
							"pm.test(\"Get Cur_ID and send request\", function () {",
							"    for (let i = 0; i < (jsonData.length); i++) { ",
							"        curr_ID = jsonData[i].Cur_ID;",
							"",
							"         pm.sendRequest({",
							"           url: 'http://162.55.220.72:5005/curr_byn',",
							"            method: 'POST',        ",
							"            body: {",
							"                mode: 'formdata',",
							"                formdata: [",
							"                    {key: \"auth_token\", value: auth_t, disabled: false, description: {content:\"\", type:\"text/plain\"}},",
							"                    {key: \"curr_code\", value: curr_ID, disabled: false, description: {content:\"\", type:\"text/plain\"}}",
							"                ]",
							"                }",
							"        }, function (err, res) {",
							"                if  (res.code == 500) {",
							"                    return;",
							"                } else if (res.code == 200){",
							"                   if (res.json().Cur_OfficialRate)",
							"                      { console.log(res.json());}",
							"                    }   ",
							"                ",
							"            });",
							"    }",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test_1 - Status code 200",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Test_2 - JSON structure",
							"let schema = {",
							"    \"type\": \"object\",",
							"    \"required\":[\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"],",
							"    \"properties\":{",
							"        \"Cur_Abbreviation\": {\"type\": \"string\"},",
							"        \"Cur_ID\": {\"type\": \"integer\"},",
							"        \"Cur_Name\": {\"type\": \"string\"},",
							"        \"Cur_OfficialRate\": {\"type\": \"number\"},",
							"        \"Cur_Scale\": {\"type\": \"integer\"},",
							"        \"Date\": {\"type\": \"string\"}",
							"    }",
							"}",
							"pm.test('Schema is valid', function() {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}